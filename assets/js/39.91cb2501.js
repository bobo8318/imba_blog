(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{385:function(e,n,s){"use strict";s.r(n);var a=s(43),t=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"watchdog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watchdog"}},[e._v("#")]),e._v(" watchdog")]),e._v(" "),s("h3",{attrs:{id:"_1-watchdog-全平台监测工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-watchdog-全平台监测工具"}},[e._v("#")]),e._v(" 1.watchdog:全平台监测工具")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import sys\nimport time\nimport logging\nfrom watchdog.observers import Observer\nfrom watchdog.events import LoggingEventHandler\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.INFO,\n                        format='%(asctime)s - %(message)s',\n                        datefmt='%Y-%m-%d %H:%M:%S')\n    path = sys.argv[1] if len(sys.argv) > 1 else '.'\n    event_handler = LoggingEventHandler()\n    observer = Observer()\n    observer.schedule(event_handler, path, recursive=True)\n    observer.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n    \n//watchdog.events.FileSystemEventHandler   处理器基类 使用需要继承该类\nclass LoggingEventHandler(FileSystemEventHandler):# watchdog.events.LoggingEventHandler 自带的已实现子类\n    \"\"\"Logs all the events captured.\"\"\"\n\n    def on_moved(self, event):\n        super(LoggingEventHandler, self).on_moved(event)\n\n        what = 'directory' if event.is_directory else 'file'\n        logging.info(\"Moved %s: from %s to %s\", what, event.src_path,\n                     event.dest_path)\n\n    def on_created(self, event):\n        super(LoggingEventHandler, self).on_created(event)\n\n        what = 'directory' if event.is_directory else 'file'\n        logging.info(\"Created %s: %s\", what, event.src_path)\n\n    def on_deleted(self, event):\n        super(LoggingEventHandler, self).on_deleted(event)\n\n        what = 'directory' if event.is_directory else 'file'\n        logging.info(\"Deleted %s: %s\", what, event.src_path)\n\n    def on_modified(self, event):\n        super(LoggingEventHandler, self).on_modified(event)\n\n        what = 'directory' if event.is_directory else 'file'\n        logging.info(\"Modified %s: %s\", what, event.src_path)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br"),s("span",{staticClass:"line-number"},[e._v("48")]),s("br"),s("span",{staticClass:"line-number"},[e._v("49")]),s("br"),s("span",{staticClass:"line-number"},[e._v("50")]),s("br")])]),s("ul",[s("li",[s("p",[e._v("self.on_any_event(event) ： 任何事件发生都会首先执行该方法，该方法默认为空，dispatch()方法会先执行该方法，然后再把event分派给其他方法处理")])]),e._v(" "),s("li",[s("p",[e._v("observer")]),e._v(" "),s("blockquote",[s("p",[e._v("watchdog.observers.Observer(timeout=1)")]),e._v(" "),s("p",[e._v("observer.schedule(event_handler, path, recursive=False) # 控指定路径path，该路径触发任何事件都会调用event_handler来处理，如果path是目录，则recursive=True则会递归监控该目录的所有变化。")]),e._v(" "),s("p",[e._v("observer.add_handler_for_watch(event_handler, watch)\n添加一个新的事件处理器到watch中，watch是ObservedWatch()类或其子类的实例")]),e._v(" "),s("p",[e._v("observer.remove_handler_for_watch(event_handler, watch)\n从watch中移除一个事件处理器")])])])])])}),[],!1,null,null,null);n.default=t.exports}}]);