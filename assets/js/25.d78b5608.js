(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{382:function(t,i,e){"use strict";e.r(i);var v=e(43),_=Object(v.a)({},(function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"github-安装使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-安装使用"}},[t._v("#")]),t._v(" github 安装使用")]),t._v(" "),e("h3",{attrs:{id:"_1-git-bash-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-bash-安装"}},[t._v("#")]),t._v(" 1.git bash 安装")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://git-scm.com/download/win",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载gitbash"),e("OutboundLink")],1),e("br"),t._v("\n官网地址：https://git-scm.com/downloads")]),t._v(" "),e("h3",{attrs:{id:"_2-ssh-生成-windows下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-ssh-生成-windows下"}},[t._v("#")]),t._v(" 2.ssh 生成(windows下)")]),t._v(" "),e("ul",[e("li",[t._v("设置用户信息")])]),t._v(" "),e("blockquote",[e("p",[t._v('$ git config --global user.name "hanzichi" //给自己起个用户名'),e("br"),t._v('\n$ git config --global user.email  "abc@gmail.com" //填写自己的邮箱')])]),t._v(" "),e("ul",[e("li",[t._v("生成秘钥")])]),t._v(" "),e("blockquote",[e("p",[t._v('ssh-keygen -t rsa -C "abc@163.com"')]),t._v(" "),e("p",[t._v("// linux 默认路径")]),t._v(" "),e("p",[t._v("/home/user/.ssh")]),t._v(" "),e("p",[t._v("//windows默认路径")]),t._v(" "),e("p",[t._v("C:\\Users\\Administrator.ssh")])]),t._v(" "),e("p",[t._v("最后得到了两个文件：id_rsa和id_rsa.pub 复制id_rsa.pub文件内容 在github中新建ssh key 添加保存")]),t._v(" "),e("ul",[e("li",[t._v("测试命令")])]),t._v(" "),e("blockquote",[e("p",[t._v("ssh git@github.com")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("使用ssh")]),t._v(" "),e("ul",[e("li",[t._v("查看当前url")])]),t._v(" "),e("blockquote",[e("p",[t._v("Git remote -v //默认使用的是https\n使用类似 git@github.com:someaccount/someproject.git的sshurl 在github网站上可以获取")])]),t._v(" "),e("ul",[e("li",[t._v("设置ssh地址")])]),t._v(" "),e("blockquote",[e("p",[t._v("git remote set-url origin git@github.com:someaccount/someproject.git")])])])]),t._v(" "),e("h3",{attrs:{id:"_3-使用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用命令"}},[t._v("#")]),t._v(" 3.使用命令")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("git clone **(项目地址)\n克隆一个git项目到本地,将git项目拉取到本地")])]),t._v(" "),e("li",[e("p",[t._v("git status\n查看文件状态,列出当前目录没有被git管理，以及被修改过还未提交的文件")])]),t._v(" "),e("li",[e("p",[t._v("git add *\n将我们提交的文件添加到索引库中（添加到缓冲区），"),e("em",[t._v("可以是路径也可以是.符号，")]),t._v(" git add . 代表将当前目录下的所有文件都添加到索引库中,如果指定路径则代表将制定路径的文件添加到索引库中。")])]),t._v(" "),e("li",[e("p",[t._v('git commit -m "备注"\n将文件推送到本地仓库中,-m 后可以填写此次提交的备注如git commit -m "提交删除功能代码"，那么在git项目中的提交记录里面就能看见你的推送备注。这一步仅仅是放在缓冲区中，还未真正提交代码')])]),t._v(" "),e("li",[e("p",[t._v("git push origin 分支名\n这一步才是推送代码推送时需要跟分支名，表示需要将代码推送至某个分支.如git *  push origin dev表示你要讲代码推送至dev分支。")])]),t._v(" "),e("li",[e("p",[t._v("git pull\n更新当前分支的代码,获取最新的代码")])]),t._v(" "),e("li",[e("p",[t._v("git checkout 分支名\n切换分支")])]),t._v(" "),e("li",[e("p",[t._v('git merge 分支名\n当前分支合并其他分支\n所以一般的使用简易流程 git add ， git commit -m "", git push origin 。 当然如果远端有代码更新的情况需要git pull更新一下，中间也可以使用git status 查看不同时期的状态')])]),t._v(" "),e("li",[e("p",[t._v("git remote show origin 查看远程仓库地址")])]),t._v(" "),e("li",[e("p",[t._v("git remote set-url origin git@192.168.30.29:chenwei/em-data.com.cn.git 修改远程仓库地址")])]),t._v(" "),e("li",[e("p",[t._v('git remote add origin "xxx.git" 设置远程仓库地址')])])]),t._v(" "),e("h3",{attrs:{id:"常用流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用流程"}},[t._v("#")]),t._v(" 常用流程")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git pull\ngit add .\ngit commit -m,message\ngit push\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h3",{attrs:{id:"gitignore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[t._v("#")]),t._v(" .gitignore")]),t._v(" "),e("blockquote",[e("p",[t._v("/mtk 过滤整个文件夹\n*.zip 过滤所有.zip文件\n/mtk/do.c 过滤某个具体文件\n!/mtk/one.txt 追踪（不过滤）某个具体文件")]),t._v(" "),e("p",[t._v("以斜杠“/”开头表示目录；\n以星号“*”通配多个字符；\n以问号“?”通配单个字符\n以方括号“[]”包含单个字符的匹配列表；\n以叹号“!”表示不忽略(跟踪)匹配到的文件或目录。")])]),t._v(" "),e("ul",[e("li",[t._v("gitignore不起作用")])]),t._v(" "),e("blockquote",[e("p",[t._v("git rm -r --cached .//删除本地缓存\ngit add .\ngit commit -m 'update .gitignore'")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("crlf转换问题 由于linux和windows换行符不同")]),t._v(" "),e("blockquote",[e("p",[t._v("// 提交时转换为LF，检出时转换为CRLF\ngit config --global core.autocrlf true")]),t._v(" "),e("p",[t._v("// 提交时转换为LF，检出时不转换\ngit config --global core.autocrlf input")]),t._v(" "),e("p",[t._v("// 提交检出均不转换\ngit config --global core.autocrlf false")])])]),t._v(" "),e("li",[e("p",[t._v("遇到问题-----git-----You have not concluded your merge (MERGE_HEAD exists) git拉取失败")]),t._v(" "),e("blockquote",[e("p",[t._v("有2个解决办法:\n1.保留你本地的修改")]),t._v(" "),e("p",[t._v("git merge --abortgit reset --merge\n合并后记得一定要提交这个本地的合并然后在获取线上仓库")]),t._v(" "),e("p",[t._v("git pull")]),t._v(" "),e("p",[t._v("2.down下线上代码版本,抛弃本地的修改")]),t._v(" "),e("p",[t._v("git fetch --all\ngit reset --hard origin/master")]),t._v(" "),e("p",[t._v("git fetch")])])]),t._v(" "),e("li",[e("p",[t._v("修改远程ssh连接端口")]),t._v(" "),e("blockquote",[e("p",[t._v("编辑~/ .ssh / config文件。添加如下内容：")]),t._v(" "),e("p",[t._v("Host example.com\nPort 1234")])])]),t._v(" "),e("li",[e("p",[t._v("新建分支")]),t._v(" "),e("blockquote",[e("p",[t._v("checkout dev -b")])])]),t._v(" "),e("li",[e("p",[t._v("合并分支")]),t._v(" "),e("ul",[e("li",[e("blockquote",[e("p",[t._v("git merge –no-ff 可以保存你之前的分支历史。能够更好的查看 merge历史，以及branch 状态。")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("git merge 则不会显示 feature，只保留单条分支记录。")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("快进”(无冲突)")]),t._v(" "),e("blockquote",[e("p",[t._v("$ git checkout -b dev")]),t._v(" "),e("p",[t._v("$ git checkout master")]),t._v(" "),e("p",[t._v("$ git merge dev")]),t._v(" "),e("p",[t._v("$ git branch -d dev")])])]),t._v(" "),e("li",[e("p",[t._v("有冲突")]),t._v(" "),e("blockquote",[e("p",[t._v("$ git status 查看冲突文件")]),t._v(" "),e("p",[t._v("修改 后")]),t._v(" "),e("p",[t._v("$ git add .")]),t._v(" "),e("p",[t._v("$ git commit -m 'test'")]),t._v(" "),e("p",[t._v("$ git branch -d dev")])])])])]),t._v(" "),e("li",[e("p",[t._v("常见问题")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("git remote set-url origin \"xxx.git\" 报错 No such remote 'origin'")]),t._v(" "),e("blockquote",[e("p",[t._v('git remote add origin "xxx.git"')])])]),t._v(" "),e("li",[e("p",[t._v("Updates were rejected because the remote contains work that you do")]),t._v(" "),e("blockquote",[e("p",[t._v("push 之前 先 git pull origin master 即可")])])]),t._v(" "),e("li",[e("p",[t._v("git clone提示失败 fatal: The remote end hung up unexpectedlReceiviny00 KiB/s fatal: early EOF(328/529),")]),t._v(" "),e("blockquote",[e("p",[t._v("运行：git config –global http.postBuffer 1048576000 即可。")]),t._v(" "),e("p",[t._v("如果不行，试试：")]),t._v(" "),e("p",[t._v("git config --global core.compression 9")])])])])])])])}),[],!1,null,null,null);i.default=_.exports}}]);